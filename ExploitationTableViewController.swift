//
//  ExploitationViewController.swift
//  Child Labor
//
//  Created by E J Kalafarski on 4/30/15.
//  U.S. Government Work https://www.usa.gov/government-works
//

import UIKit

class ExploitationTableViewController: UITableViewController, UICollectionViewDataSource, UICollectionViewDelegate {
    
    var countriesWithGoods = NSMutableArray()
    var goodsByCountry: [String: NSMutableArray] = [:]
    var exploitationByCountry: [String: NSMutableArray] = [:]
    
    var countriesWithChildLabor = NSMutableArray()
    var goodsWithChildLaborByCountry: [String: NSMutableArray] = [:]
    var exploitationWithChildLaborByCountry: [String: NSMutableArray] = [:]
    
    var countriesWithForcedLabor = NSMutableArray()
    var goodsWithForcedLaborByCountry: [String: NSMutableArray] = [:]
    var exploitationWithForcedLaborByCountry: [String: NSMutableArray] = [:]

    var countriesWithForcedChildLabor = NSMutableArray()
    var goodsWithForcedChildLaborByCountry: [String: NSMutableArray] = [:]
    var exploitationWithForcedChildLaborByCountry: [String: NSMutableArray] = [:]
    
    var state = 0

    override func viewDidLoad() {
        super.viewDidLoad()

        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false

        // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
        // self.navigationItem.rightBarButtonItem = self.editButtonItem()
        
        // Record GA view
        let tracker = GAI.sharedInstance().defaultTracker
        tracker?.set(kGAIScreenName, value: "Exploitation Screen")
        tracker?.send(GAIDictionaryBuilder.createAppView().build() as NSDictionary? as? [AnyHashable: Any])
        
        // Get the country data
        var contents: NSString?
        do {
            contents = try NSString(contentsOfFile: Bundle.main.path(forResource: "countries_2015", ofType: "xml")!, encoding: String.Encoding.utf8.rawValue)
        } catch _ {
            contents = nil
        }
        let countriesXML = SWXMLHash.parse(contents as! String)
        
        // Create an array of countries and an associative array of goods for each country
        for country in countriesXML["Countries"]["Country"] {
            if country["Goods"]["Good"].all.count > 0 {
                
                let countryName = country["Name"].element?.text
            
                let goods = NSMutableArray()
                let exploitations = NSMutableArray()

                let goodsWithChildLabor = NSMutableArray()
                let exploitationWithChildLabor = NSMutableArray()

                let goodsWithForcedLabor = NSMutableArray()
                let exploitationWithForcedLabor = NSMutableArray()

                let goodsWithForcedChildLabor = NSMutableArray()
                let exploitationWithForcedChildLabor = NSMutableArray()
                
                var thisCountryHasChildLabor = false
                var thisCountryHasForcedLabor = false
                var thisCountryHasForcedChildLabor = false
                
                // For each of the country's goods
                for good in country["Goods"]["Good"] {
                    
                    let goodName = good["Good_Name"].element?.text
                    
                    let childLaborStatusForGood = good["Child_Labor"].element?.text
                    let forcedLaborStatusForGood = good["Forced_Labor"].element?.text
                    let forcedChildLaborStatusForGood = good["Forced_Child_Labor"].element?.text
                    
                    // For every good
                    // Add the good to an array
                    goods.add(goodName!)
                    
                    // Add the exploitation type to an array
                    if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "No" {
                        exploitations.add(0)
                    } else if childLaborStatusForGood == "No" && forcedLaborStatusForGood == "Yes" {
                        exploitations.add(1)
                    } else if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "Yes" && forcedChildLaborStatusForGood == "No" {
                        exploitations.add(2)
                    } else {
                        exploitations.add(3)
                    }
                    
                    // For a good with child labor
                    if childLaborStatusForGood == "Yes" {
                        goodsWithChildLabor.add(goodName!)
                        thisCountryHasChildLabor = true
                        
                        // Add the exploitation type to an array
                        if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "No" {
                            exploitationWithChildLabor.add(0)
                        } else if childLaborStatusForGood == "No" && forcedLaborStatusForGood == "Yes" {
                            exploitationWithChildLabor.add(1)
                        } else if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "Yes" && forcedChildLaborStatusForGood == "No" {
                            exploitationWithChildLabor.add(2)
                        } else {
                            exploitationWithChildLabor.add(3)
                        }
                    }
                    
                    // For a good with forced labor
                    if forcedLaborStatusForGood == "Yes" {
                        goodsWithForcedLabor.add(goodName!)
                        thisCountryHasForcedLabor = true
                        
                        // Add the exploitation type to an array
                        if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "No" {
                            exploitationWithForcedLabor.add(0)
                        } else if childLaborStatusForGood == "No" && forcedLaborStatusForGood == "Yes" {
                            exploitationWithForcedLabor.add(1)
                        } else if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "Yes" && forcedChildLaborStatusForGood == "No" {
                            exploitationWithForcedLabor.add(2)
                        } else {
                            exploitationWithForcedLabor.add(3)
                        }
                    }
                    
                    // For a good with forced child labor
                    if forcedChildLaborStatusForGood == "Yes" {
                        goodsWithForcedChildLabor.add(goodName!)
                        thisCountryHasForcedChildLabor = true
                        
                        // Add the exploitation type to an array
                        if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "No" {
                            exploitationWithForcedChildLabor.add(0)
                        } else if childLaborStatusForGood == "No" && forcedLaborStatusForGood == "Yes" {
                            exploitationWithForcedChildLabor.add(1)
                        } else if childLaborStatusForGood == "Yes" && forcedLaborStatusForGood == "Yes" && forcedChildLaborStatusForGood == "No" {
                            exploitationWithForcedChildLabor.add(2)
                        } else {
                            exploitationWithForcedChildLabor.add(3)
                        }
                    }
                }
                
                // For every country
                countriesWithGoods.add(countryName!)
                goodsByCountry.updateValue(goods, forKey: countryName!)
                exploitationByCountry.updateValue(exploitations, forKey: countryName!)
                
                // For a country with child labor
                if thisCountryHasChildLabor {
                    countriesWithChildLabor.add(countryName!)
                    goodsWithChildLaborByCountry.updateValue(goodsWithChildLabor, forKey: countryName!)
                    exploitationWithChildLaborByCountry.updateValue(exploitationWithChildLabor, forKey: countryName!)
                }
                
                // For a country with forced labor
                if thisCountryHasForcedLabor {
                    countriesWithForcedLabor.add(countryName!)
                    goodsWithForcedLaborByCountry.updateValue(goodsWithForcedLabor, forKey: countryName!)
                    exploitationWithForcedLaborByCountry.updateValue(exploitationWithForcedLabor, forKey: countryName!)
                }
                
                // For a country with forced child labor
                if thisCountryHasForcedChildLabor {
                    countriesWithForcedChildLabor.add(countryName!)
                    goodsWithForcedChildLaborByCountry.updateValue(goodsWithForcedChildLabor, forKey: countryName!)
                    exploitationWithForcedChildLaborByCountry.updateValue(exploitationWithForcedChildLabor, forKey: countryName!)
                }
            }
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Make sure the ugly table cell selection is cleared when returning to this view
        if let tableIndex = self.tableView.indexPathForSelectedRow {
            self.tableView.deselectRow(at: tableIndex, animated: false)
        }
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        // Return the number of sections.
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // Return the number of rows in the section.
        switch state {
        case 0:
            return countriesWithGoods.count
        case 1:
            return countriesWithChildLabor.count
        case 2:
            return countriesWithForcedLabor.count
        default:
            return countriesWithForcedChildLabor.count
        }
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Country", for: indexPath) as UITableViewCell

        // Configure the cell...
        let theLabel : UILabel? = cell.viewWithTag(101) as? UILabel
//        let theButton : UIButton? = cell.viewWithTag(101) as? UIButton
        var theCollectionView : UICollectionView? //= cell.viewWithTag(102) as? UICollectionView
        
        // Set collection view tag to the row index, to pass the index of the country into the collection view
        for subview in cell.contentView.subviews {
            if subview.isKind(of: UICollectionView.self) {
                theCollectionView = subview as? UICollectionView
            }
        }
        
        theCollectionView!.tag = indexPath.row
        theCollectionView?.reloadData()
        
        switch state {
        case 0:
            // Set the country name
            theLabel?.text = countriesWithGoods[indexPath.row] as? String
//            theButton?.setTitle(countriesWithGoods[indexPath.row] as? String, forState: .Normal)
        case 1:
            // Set the country name
            theLabel?.text = countriesWithChildLabor[indexPath.row] as? String
//            theButton?.setTitle(countriesWithChildLabor[indexPath.row] as? String, forState: .Normal)
        case 2:
            // Set the country name
            theLabel?.text = countriesWithForcedLabor[indexPath.row] as? String
//            theButton?.setTitle(countriesWithForcedLabor[indexPath.row] as? String, forState: .Normal)
        default:
            // Set the country name
            theLabel?.text = countriesWithForcedChildLabor[indexPath.row] as? String
//            theButton?.setTitle(countriesWithForcedChildLabor[indexPath.row] as? String, forState: .Normal)
        }

        return cell
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch state {
        case 0:
            return goodsByCountry[countriesWithGoods[collectionView.tag] as! String]!.count
        case 1:
            return goodsWithChildLaborByCountry[countriesWithChildLabor[collectionView.tag] as! String]!.count
        case 2:
            return goodsWithForcedLaborByCountry[countriesWithForcedLabor[collectionView.tag] as! String]!.count
        default:
            return goodsWithForcedChildLaborByCountry[countriesWithForcedChildLabor[collectionView.tag] as! String]!.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Good", for: indexPath) as UICollectionViewCell
        
        //
        let goodButton : UIButton? = cell.viewWithTag(201) as? UIButton
        
        //
        let cl : UIImageView? = cell.viewWithTag(202) as? UIImageView
        let fl : UIImageView? = cell.viewWithTag(203) as? UIImageView
        
        let goodLabel : UILabel? = cell.viewWithTag(204) as? UILabel
        
        var goodName = ""
        var countryName = ""
        var exploitationType = 0
        
        switch state {
        case 0:
            goodName = goodsByCountry[countriesWithGoods[collectionView.tag] as! String]![indexPath.row] as! String
            countryName = countriesWithGoods[collectionView.tag] as! String
            exploitationType = exploitationByCountry[countryName]![indexPath.row] as! Int
        case 1:
            goodName = goodsWithChildLaborByCountry[countriesWithChildLabor[collectionView.tag] as! String]![indexPath.row] as! String
            countryName = countriesWithChildLabor[collectionView.tag] as! String
            exploitationType = exploitationWithChildLaborByCountry[countryName]![indexPath.row] as! Int
        case 2:
            goodName = goodsWithForcedLaborByCountry[countriesWithForcedLabor[collectionView.tag] as! String]![indexPath.row] as! String
            countryName = countriesWithForcedLabor[collectionView.tag] as! String
            exploitationType = exploitationWithForcedLaborByCountry[countryName]![indexPath.row] as! Int
        default:
            goodName = goodsWithForcedChildLaborByCountry[countriesWithForcedChildLabor[collectionView.tag] as! String]![indexPath.row] as! String
            countryName = countriesWithForcedChildLabor[collectionView.tag] as! String
            exploitationType = exploitationWithForcedChildLaborByCountry[countryName]![indexPath.row] as! Int
        }

        goodButton!.setImage(UIImage(named:"icons_" + goodName.replacingOccurrences(of: "/", with: "_").replacingOccurrences(of: " ", with: "_") + "-33")?.withRenderingMode(.alwaysTemplate), for: UIControlState())
        goodLabel?.text = goodName
        
        goodButton?.accessibilityLabel = goodName
        
        switch exploitationType {
        case 0:
            cl?.isHidden = false
            cl?.image = UIImage(named: "hand")
            fl?.isHidden = true
        case 1:
            cl?.isHidden = true
            cl?.image = UIImage(named: "hand")
            fl?.isHidden = false
        case 2:
            cl?.isHidden = false
            cl?.image = UIImage(named: "hand")
            fl?.isHidden = false
        case 3:
            cl?.isHidden = false
            cl?.image = UIImage(named: "hand-black")
            fl?.isHidden = false
        default:
            break
        }
        
        return cell
    }

    @IBAction func filterChanged(_ sender: AnyObject) {
        state = sender.selectedSegmentIndex
        self.tableView.reloadData()
    }
    
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "goodSelectedFromExploitationTable" {
            let svc = segue.destination as! GoodController
            svc.goodName = ((sender as! UIButton).superview?.viewWithTag(204) as! UILabel).text!
        } else if segue.identifier == "countrySelectedFromExploitationTable" {
            let svc = segue.destination as! CountryController
            svc.countryName = ((sender as! UITableViewCell).viewWithTag(101) as! UILabel).text!
        }

    }

}
